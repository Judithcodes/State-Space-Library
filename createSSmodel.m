%% ssModel = createSSmodel(A,B,C,D)
%   i) {A,B,C,D} = matrices where the SS model is:
%          x_d = Ax + Bu  |  {x,x_d} = [n x 1]; u = [p x 1]
%          y = Cx + Du    |  y = [q x 1]
%      To be accepted as valid by this function, it must be the case that
%           A = [n x n];  B = [n x p]
%           C = [q x n];  D = [q x p], or [0]
%   o) ssModel = a struct with the fields {A,B,C,D, n_in, n_states, n_out}
%                where n_in = p, n_states = n, n_out = q
%      Includes default plot parameters for the time-domain and state space 
%      plots generated by ssResponse()

%% Numerical State Space Functions: createSSmodel()
% [v2.0] [2019.08.01]
%   -Added validity check (including the input buffer for the matrix D that
%    allows you to use "D = 0;" instead of bothering to make a zero matrix
%    of the correct size
%   -Added all of the Plot Parameters (state space and time-domain),
%    allowing for a way-more generalized ssResponse function
% [v2.1] [2019.08.03]
%   -Added settling time parameters
% [v2.2] [2019.08.04]
%   -

% SS functions used directly:    -none-
% SS functions used indirectly:  -none-

function ssModel = createSSmodel(A,B,C,D)
    fa1 = 'A'; %[n x n]
    fa2 = 'B'; %[n x p]
    fa3 = 'C'; %[q x n]
    fa4 = 'D'; %[q x p]
    fa5 = 'n_in';     %[p] where u is [p x 1]; generally p = 1
    fa6 = 'n_states'; %[n] where x,x_dot are [n x 1]
    fa7 = 'n_out';    %[q] where  y is [q x 1]
    
    % State Space Plot Parameters (Defaults)
    fb1 = 'ssPlotDim'; vb1 = 2; %State Space plots are 2D by default
    fb2 = 'ssPlot_X';  vb2 = 1; %which state(s) gets plotted on the x-axis
    fb3 = 'ssPlot_Y';  vb3 = 2; %which state(s) gets plotted on the y-axis
    fb4 = 'ssPlot_Z';  vb4 = 0; %which state(s) gets plotted on the z-axis (for 3D plots)
    %fb5 = 'ssPlot_numCurves'; vb5 = length(vb2); -- it's more robust to calculate this within the ssResponse() function
    fb6 = 'ssPlot_XLabel'; vb6 = 'Position [m]';
    fb7 = 'ssPlot_YLabel'; vb7 = 'Velocity [m/s]';
    fb8 = 'ssPlot_ZLabel'; vb8 = 'NULL';
    
    % Time-Domain Plot Parameters (Defaults)
    fc0 = 'tPlot_useDiffY';    vc0 = true;
    fc1 = 'tPlot_InputLabel';  vc1 = 'Input: Force [N]';
    fc2 = 'tPlot_OutputLabel'; vc2 = 'Output: Position [m]';
    
    % Response Parameters
    fd1 = 't_settling'; vd1 = []; %The ith element is the (x_settling(i)*100)% settling time
    fd2 = 'x_settling'; vd2 = []; %The function ssSettlingTime is used to determine 
                                  % the settling time and add it to these vectors
                                  % (or return the values if they're already here
    
    [n1, n2] = size(A); % n=n1=n2=n3=n4 to be valid
    [n3, p1] = size(B); % p=p1=p2 to be valid
    [q1, n4] = size(C); % q=q1=q2 to be valid
    [q2, p2] = size(D);
    
    % Check matrix dimensions to ensure the SS model is valid
    valid = zeros(3,1);
    valid(1) = (n1==n2)&&(n1==n3)&&(n1==n4)&&(n2==n3)&&(n2==n4)&&(n3==n4);
    if(D == 0)
        valid(2) = 1;
        valid(3) = 1;
        if(sum(size(D)) == 2)
            D = zeros(q1, p1);
        end
    else
        valid(2) = (p1==p2);
        valid(3) = (q1==q2);
    end
    
    % Generate state space model
    if(sum(valid) == 3)
        n_in = p1;
        n_states = n1;
        n_out = q1;
        if(n_states == 1)
            vb1 = 0; %ssPlotDim; if there is only one state, it defaults to no state space diagram
        end

        ssModel = struct(fa1,A, fa2,B, fa3,C, fa4,D, fa5,n_in, fa6,n_states, fa7,n_out,...
                         fb1,vb1, fb2,vb2, fb3,vb3, fb4,vb4, fb6,vb6, fb7,vb7, fb8,vb8,...
                         fc0,vc0, fc1,vc1, fc2,vc2, ...
                         fd1,vd1, fd2,vd2);
    else
        fprintf('INVALID State Space Model [%d; %d; %d]\n', valid(1), valid(2), valid(3));
        ssModel = -999;
    end
end
