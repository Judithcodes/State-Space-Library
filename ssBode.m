%% [omega, magnitudeDB, phase] = ssBode(SS, decStart, decStop, o_n, makePlot)
%   i) SS = state space model; struct, as generated by createSSmodel.m
%   i) decStart = power of 10 at which the Bode diagram starts
%   i) decStop = power of 10 at which the Bode diagram stops
%   i) o_n = number of logarithmically-spaced data points along the
%            frequency range
%   i) makePlot = [optional argument] boolean; defaults to true if no
%                 argument is provided
%   o) omega = the ang. freq. vector (in rad/s)
%   o) magnitudeDB = the magnitude vector (in dB)
%   o) phase = the phase vector (in degrees)

%% Numerical State Space Functions: ssBode()
% [v1.0] [2019.08.01]
%   -This function generates a somewhat janky Bode magnitude plot. It
%    doesn't necessarily find the true amplitude, and it doesn't currently
%    generate a phase diagram.
%   -Currently, the SS model can be SISO or SIMO, but not MIMO; I don't
%    really see the point of making it MIMO. I don't even know if that
%    makes sense
%   -FUCK! This method finds the peak of the TRANSIENT response -- I need
%    the steady state!!
% [v2.1] [2019.08.03]
%   -Implemented the use of ssSettlingTime() as a way to (hopefully
%    efficiently) skip the transient response. The Bode diagrams now look
%    much smoother
%   >Future improvements: still need a means to calculate phase
% [v3.0] [2019.08.24]
%   -Added a means to calculate phase
%   -Numerical means of calculating t_firstSSPeak_in (could calculate it
%    directly; may help)
%   -Using the phaseOffset variable to account for the various cases
% [v3.1] [2019.08.24]
%   -New method for calculating phase by using all the maxima
%   >Once I finish the phase stuff, I'm going to modify how I do the
%    calculation of the magnitude -- going to use the average of the
%    maxima, not just the max of the maxima
%   >I should also modify the number of extra periods I check -- need fewer
%    for low frequencies to keep runtime low; need more for high
%    frequencies to increase the likelihood I'm actually capturing the peak
% [v3.2]
%   -Added discrete variablility to dt, numExtraPeriods
%   -Made makePlot default to 1 if no argument is provided

% SS function used directly:    ssResponse(), ssSettlingTime()
% SS function used indirectly:  createSSmodel()
% Other custom functions used:  todB(), findExtrema()

function [omega, magnitudeDB, phase] = ssBode(SS, decStart, decStop, o_n, makePlot)
    DEBUG = false;
    if nargin==4
        makePlot = 1; %If no value was supplied, assume both maxima and minima
    end
    
    dt = 0.001; %[s]Default time step
    t_settling = ssSettlingTime(SS, 0.001);
    numExtraPeriods = 10;
    
    omega = transpose(logspace(decStart,decStop,o_n)); %[rad/s]
    period = (2*pi)./omega; %[s]
    magnitude = zeros(o_n, SS.n_out);
    phase = zeros(o_n, SS.n_out); %[deg]
    phaseDebug_Sign = zeros(o_n, SS.n_out);
    
    for i = 1:o_n
        if(omega(i) > (10^2))
            dt = 0.0001;
        elseif(omega(i) < (10^-1))
            numExtraPeriods = 5;
        end
        t_Vec = 0:dt:(t_settling + numExtraPeriods*period(i));
        i_settle = round(t_settling/dt, 0);
        
        doPlot = false;
        if(DEBUG && (mod(i,10) == 0)) doPlot = 0.5; end
        sineInput = sin(omega(i).*t_Vec);
        response = ssResponse(SS, sineInput, t_Vec, doPlot); %[n_out x t_n]
        for j = 1:SS.n_out
            magnitude(i,j) = max(response(i_settle:end,j)); %This finds the peak of the transient response!
            
            % CALCULATE PHASE
            [maxima_in, max_in_time] = findExtrema(t_Vec, sineInput);
            [maxima_out, max_out_time] = findExtrema(t_Vec, response(:,j));
            num_extrema = min( [length(maxima_in), length(maxima_out)] );
            tempPhases = zeros(num_extrema,1);
            if(max_in_time(1) < max_out_time(1)) %Negative Phase
                phaseSign = -1;
            elseif(max_in_time(1) > max_out_time(1)) %Positive Phase
                phaseSign = 1;
                p = 1;
                while(max_out_time(p) < max_in_time(1))
                    p = p+1;
                end
                max_out_time = max_out_time((p-1):end);
            end
            phaseDebug_Sign(i) = 100*phaseSign;
            for e = 2:num_extrema
                    tempPhases(e) = (360/period(i)) * (max_in_time(e) - max_out_time(e));
            end
            phase(i,j) = mean(tempPhases);
        end
    end
    magnitudeDB = todB(magnitude);
    
    % GENERATE PLOT
    if(makePlot)
        figure;
        
        subplot(2,1,1); %MAGNITUDE PLOT
        semilogx(omega, magnitudeDB(:,1), 'DisplayName', 'output_1');
        hold on;
        if(SS.n_out > 1)
            for q = 2:SS.n_out
                semilogx(omega, magnitudeDB(:,q), 'DisplayName', sprintf('output_%d', q));
            end
        end
        xlabel('Angular Frequency [rad/s]');
        ylabel('Magnitude [dB]');
        title('State Space Bode Diagram: Magnitude');
        legend('show');
        grid on; hold off;
        
        subplot(2,1,2);
        semilogx(omega, phase(:,1), 'DisplayName', 'output_1');
        hold on;
        if(SS.n_out > 1)
            for q = 2:SS.n_out
                semilogx(omega, phase(:,q), 'DisplayName', sprintf('output_%d', q));
            end
        end
        xlabel('Angular Frequency [rad/s]');
        ylabel('Phase [deg]');
        title('State Space Bode Diagram: Phase');
        legend('show');
        %semilogx(omega, phaseDebug_Sign(:,1),'k*');
        grid on; hold off;
    end
end
