%% output = ssImpulse(SS, t_Vec, makePlot)
%   i) SS = state space struct as generated by createSSmodel()
%   i) t_Vec = [optional argument, defaults to dt=0.001,
%                   t_End=1.1*(1% settling time)]
%              row or column vector of length t_n
%   i) makePlot = [optional argument, defaults to 1]
%                 {1, 0.5, 0} results in {plot, plot w/o input, no plot}
%   o) output = [t_n x n_out] matrix; this is the output directly from
%               ssResponse(); see that function for further notes

%% Numerical State Space Functions: ssImpulse()
% [v1.0] [2019.07.31]
%   -Calls ssResponse() using a discrete impulse
% [v2.0] [2019.08.01]
%   -Updated to handle multiple input systems (every input gets an
%    identical impulse)
% [v2.1] [2019.08.25]
%   -Made t_Vec and makePlot an optional arguments

% SS functions used directly:    ssResponse()
% SS functions used indirectly:  createSSmodel()

function output = ssImpulse(SS, t_Vec, makePlot)
    % INPUT BUFFERING
    if nargin==1 %if arguments are (SS)
        t_Vec = ssImpulse_defaultTime(SS);
        makePlot = 1;
    end
    if nargin==2 %if arguments are (SS, t_Vec)
        if(length(t_Vec) ~= 1)
            makePlot = 1;
        else     %if arguments are (SS, makePlot)
            makePlot = t_Vec;
            t_Vec = ssImpulse_defaultTime(SS);
        end
    end
    
    input = zeros(length(t_Vec),SS.n_in);
    input(1,:) = 1/(t_Vec(2)-t_Vec(1)); %Discrete equivalent to an impulse with area 1
    output = ssResponse(SS, input, t_Vec, makePlot);
    
    %ylim_max = max(abs(ylim)); %Make window symmetric about 0
    %ylim([-ylim_max, ylim_max]);
end
function t = ssImpulse_defaultTime(SS)
    dt = 0.001;
    t_End = 1.1*ssSettlingTime(SS, 0.01);
    t = 0:dt:t_End;
end